#!/usr/bin/env node

var program = require("commander");
var fs = require("fs");
var request = require("request");

return new Promise((resolve, reject) => {
    fs.readFile(".rotonde", (err, data) => {
        if (err) { reject(err); }
        resolve(JSON.parse(data));
    })
}).then((settings) => {
    return new Promise((resolve, reject) => {
        fs.readFile(settings["rotonde location"], (err, data) => {
            if (err) { reject(err) };
            resolve([JSON.parse(data), settings]); // parse rotonde info & pass along settings
        });
    });
}).then((rotondeItems) => {
    return new Promise((resolve, reject) => {
        var [rotonde, settings] = rotondeItems;

        var posts = {};
        var counter = 0;

        function handleRequest(counter, name, data) {
            posts[name] = JSON.parse(data);
            // we've processed all of the portals, send the response
            if (counter == rotonde["portal"].length - 1) {
                resolve(posts);
            }
        }

        rotonde["portal"].forEach(function(portal) {
            request(portal, function(err, resp, body) {
                handleRequest(counter++, portal, body);
            });
        });
    });
}).then((posts) => {
    var timeline = [];
    for (domain in posts) {
        var post = posts[domain];
        post["feed"].forEach((entry) => {
            timeline.push({"info": post["profile"], "entry": entry});
        });
    }
    timeline.sort(compare);
    timeline.forEach((post) => {
        console.log(post["info"]["name"] + ": " + post["entry"]["text"]);
    });
});

function compare(a, b) {
    if (a["entry"]["time"] < b["entry"]["time"]) {
        return 1;
    }
    if (a["entry"]["time"] > b["entry"]["time"]) {
        return -1;
    }
    return 0;
}
